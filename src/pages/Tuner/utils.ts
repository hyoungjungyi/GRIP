// utils.ts
// Utility functions for pitch processing

/**
 * Converts frequency in Hz to the closest musical note name and its deviation in cents.
 * @param frequency - Detected frequency in Hz
 * @returns An object with note name, cents deviation, and target frequency
 */
export function frequencyToNote(frequency: number) {
  const A4 = 440;
  const SEMITONE = 69;
  const noteNames = [
    "C",
    "C#",
    "D",
    "D#",
    "E",
    "F",
    "F#",
    "G",
    "G#",
    "A",
    "A#",
    "B",
  ];

  const noteNumber = 12 * Math.log2(frequency / A4) + SEMITONE;
  const roundedNote = Math.round(noteNumber);
  const cents = Math.floor((noteNumber - roundedNote) * 100);

  const noteIndex = (roundedNote + 1200) % 12; // normalize for octave wrapping
  const noteName = noteNames[noteIndex];
  const octave = Math.floor(roundedNote / 12) - 1;

  // Î™©Ìëú Ï£ºÌååÏàò Í≥ÑÏÇ∞
  const targetFrequency = A4 * Math.pow(2, (roundedNote - SEMITONE) / 12);

  return {
    note: noteName,
    cents,
    octave,
    targetFrequency,
    fullNote: `${noteName}${octave}`,
  };
}

export function getClosestString(frequency: number): string | null {
  const stringFrequencies = {
    E: 82.41, // E2
    A: 110.0, // A2
    D: 146.83, // D3
    G: 196.0, // G3
    B: 246.94, // B3
    e: 329.63, // E4
  };

  const threshold = 30; // Hz - ÏûÑÍ≥ÑÍ∞í Ï§ÑÏûÑ
  let closestString: string | null = null;
  let minDifference = Infinity;

  for (const [stringName, stringFreq] of Object.entries(stringFrequencies)) {
    const difference = Math.abs(frequency - stringFreq);
    if (difference < minDifference) {
      minDifference = difference;
      closestString = stringName;
    }
  }

  return minDifference <= threshold ? closestString : null;
}

/**
 * Í∏∞ÌÉÄ Ï§ÑÏùò Î™©Ìëú Ï£ºÌååÏàòÎ•º Î∞òÌôòÌï©ÎãàÎã§.
 * @param stringName - Í∏∞ÌÉÄ Ï§Ñ Ïù¥Î¶Ñ (E, A, D, G, B, e)
 * @returns Î™©Ìëú Ï£ºÌååÏàò (Hz)
 */
export function getTargetFrequency(stringName: string): number {
  const stringFrequencies: { [key: string]: number } = {
    E: 82.41, // E2
    A: 110.0, // A2
    D: 146.83, // D3
    G: 196.0, // G3
    B: 246.94, // B3
    e: 329.63, // E4
  };

  return stringFrequencies[stringName] || 440; // Í∏∞Î≥∏Í∞í A4
}

/**
 * ÏùåÏ†ï Ï†ïÌôïÎèÑÎ•º Î∞±Î∂ÑÏú®Î°ú Í≥ÑÏÇ∞Ìï©ÎãàÎã§.
 * @param currentFreq - ÌòÑÏû¨ Í∞êÏßÄÎêú Ï£ºÌååÏàò
 * @param targetFreq - Î™©Ìëú Ï£ºÌååÏàò
 * @returns Ï†ïÌôïÎèÑ (0-100%)
 */
export function calculateAccuracy(
  currentFreq: number,
  targetFreq: number
): number {
  const cents = 1200 * Math.log2(currentFreq / targetFreq);
  const maxCents = 50; // ¬±50ÏÑºÌä∏Î•º 100% Ï†ïÌôïÎèÑ Î≤îÏúÑÎ°ú ÏÑ§Ï†ï
  return Math.max(0, Math.min(100, 100 - (Math.abs(cents) / maxCents) * 100));
}

/**
 * Í∏∞ÌÉÄ Ï§ÑÏùÑ Í∏∞Ï§ÄÏúºÎ°ú Ï£ºÌååÏàòÎ•º Î∂ÑÏÑùÌï©ÎãàÎã§.
 * @param frequency - Í∞êÏßÄÎêú Ï£ºÌååÏàò
 * @returns Í∞ÄÏû• Í∞ÄÍπåÏö¥ Í∏∞ÌÉÄ Ï§Ñ Ï†ïÎ≥¥ÏôÄ ÏÑºÌä∏ Ìé∏Ï∞®
 */
export function getGuitarStringInfo(frequency: number) {
  const stringFrequencies = {
    E: 82.41, // E2 (6Î≤àÏß∏ Ï§Ñ)
    A: 110.0, // A2 (5Î≤àÏß∏ Ï§Ñ)
    D: 146.83, // D3 (4Î≤àÏß∏ Ï§Ñ)
    G: 196.0, // G3 (3Î≤àÏß∏ Ï§Ñ)
    B: 246.94, // B3 (2Î≤àÏß∏ Ï§Ñ)
    e: 329.63, // E4 (1Î≤àÏß∏ Ï§Ñ)
  };

  let closestString: string | null = null;
  let minDifference = Infinity;
  let targetFrequency = 0;

  // Í∞ÄÏû• Í∞ÄÍπåÏö¥ Í∏∞ÌÉÄ Ï§Ñ Ï∞æÍ∏∞
  for (const [stringName, stringFreq] of Object.entries(stringFrequencies)) {
    const difference = Math.abs(frequency - stringFreq);
    if (difference < minDifference) {
      minDifference = difference;
      closestString = stringName;
      targetFrequency = stringFreq;
    }
  }

  if (!closestString) {
    return null;
  }

  // ÏÑºÌä∏ Ìé∏Ï∞® Í≥ÑÏÇ∞ (Í∏∞ÌÉÄ Ï§Ñ Í∏∞Ï§Ä)
  const cents = Math.round(1200 * Math.log2(frequency / targetFrequency));

  // ÎîîÎ≤ÑÍπÖ Î°úÍ∑∏ Ï∂îÍ∞Ä
  console.log("[üîç Guitar String Analysis]", {
    frequency: frequency.toFixed(2),
    closestString,
    targetFrequency: targetFrequency.toFixed(2),
    cents,
    minDifference: minDifference.toFixed(2),
    withinRange: Math.abs(cents) <= 200,
  });

  // Í∏∞ÌÉÄ Ï§Ñ Î≤îÏúÑÎ•º ÏôÑÌôî (¬±200ÏÑºÌä∏ = ÏïΩ 2ÏÑ∏ÎØ∏ÌÜ§)
  if (Math.abs(cents) > 200) {
    console.log("[‚ùå Out of range]", { cents, limit: 200 });
    return null;
  }

  return {
    stringName: closestString,
    targetFrequency,
    currentFrequency: frequency,
    cents,
    isInTune: Math.abs(cents) < 10, // ¬±10ÏÑºÌä∏ Ïù¥ÎÇ¥Î©¥ ÌäúÎãùÎê®
  };
}
