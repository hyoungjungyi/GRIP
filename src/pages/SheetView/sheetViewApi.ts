import {
  getAuthHeaders,
  getAuthHeadersForGet,
  getApiBaseUrl,
} from "../../utils/apiUtils";

const API_BASE_URL = getApiBaseUrl();

// Î™®Îì† ÏïÖÎ≥¥ Î™©Î°ù Ï°∞Ìöå API
export const getAllSongLists = async () => {
  try {
    console.log("üìã Fetching all song lists");
    const response = await fetch(`${API_BASE_URL}/api/songs/all-lists`, {
      method: "GET",
      headers: getAuthHeadersForGet(),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log("‚úÖ Get all song lists response:", result);
    return result;
  } catch (error) {
    console.error("‚ùå Failed to fetch all song lists:", error);
    throw error;
  }
};

// ÌÉ≠ ÏÉùÏÑ± API
export const generateTabFromAudio = async (audioUrl: string) => {
  try {
    console.log("üéµ Generating tab from audio URL:", audioUrl);
    const response = await fetch(`${API_BASE_URL}/api/songs/tab-generator`, {
      method: "POST",
      headers: getAuthHeaders(),
      body: JSON.stringify({ audio_url: audioUrl }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log("‚úÖ Generate tab response:", result);
    return result;
  } catch (error) {
    console.error("‚ùå Failed to generate tab from audio:", error);
    throw error;
  }
};

// ÏïÖÎ≥¥ ÏóÖÎ°úÎìú API
export const uploadSheet = async (data: {
  title: string;
  artist: string;
  cover: File;
  noteSheet: File;
  tabSheet: File;
}) => {
  try {
    console.log("üì§ Uploading sheet:", data.title);

    const formData = new FormData();
    formData.append("title", data.title);
    formData.append("artist", data.artist);
    formData.append("cover", data.cover);
    formData.append("noteSheet", data.noteSheet);
    formData.append("tabSheet", data.tabSheet);

    const response = await fetch(`${API_BASE_URL}/api/songs/upload-sheet`, {
      method: "POST",
      headers: {
        Authorization: localStorage.getItem("accessToken")
          ? `Bearer ${localStorage.getItem("accessToken")}`
          : "",
      },
      body: formData,
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log("‚úÖ Upload sheet response:", result);
    return result;
  } catch (error) {
    console.error("‚ùå Failed to upload sheet:", error);
    throw error;
  }
};

// ÏïÖÎ≥¥ Ïù¥ÎØ∏ÏßÄ Ï°∞Ìöå API
export const getSheetImage = async (songId: string) => {
  try {
    console.log("üéº Fetching sheet image for songId:", songId);
    const response = await fetch(`${API_BASE_URL}/api/songs/sheet/${songId}`, {
      method: "GET",
      headers: getAuthHeadersForGet(),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log("‚úÖ Get sheet image response:", result);
    return result;
  } catch (error) {
    console.error("‚ùå Failed to fetch sheet image:", error);
    throw error;
  }
};

// Ï¶êÍ≤®Ï∞æÍ∏∞ Ï∂îÍ∞Ä API
export const addToSavedSongs = async (songId: number) => {
  try {
    console.log("‚≠ê Adding to saved songs:", songId);
    const response = await fetch(`${API_BASE_URL}/api/songs/saved`, {
      method: "POST",
      headers: getAuthHeaders(),
      body: JSON.stringify({ songId }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log("‚úÖ Add to saved songs response:", result);
    return result;
  } catch (error) {
    console.error("‚ùå Failed to add to saved songs:", error);
    throw error;
  }
};

// Ï¶êÍ≤®Ï∞æÍ∏∞ Ï†úÍ±∞ API
export const removeFromSavedSongs = async (songId: number) => {
  try {
    console.log("‚≠ê Removing from saved songs:", songId);
    const response = await fetch(`${API_BASE_URL}/api/songs/saved/${songId}`, {
      method: "DELETE",
      headers: getAuthHeadersForGet(),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log("‚úÖ Remove from saved songs response:", result);
    return result;
  } catch (error) {
    console.error("‚ùå Failed to remove from saved songs:", error);
    throw error;
  }
};

// Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏ API
export const checkSavedSongStatus = async (songId: number) => {
  try {
    console.log("‚≠ê Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏:", songId);
    
    const response = await fetch(`${API_BASE_URL}/api/songs/saved/status/${songId}`, {
      method: "GET",
      headers: getAuthHeadersForGet(),
    });

    if (!response.ok) {
      console.error("‚ùå API ÏùëÎãµ Ïò§Î•ò:", response.status);
      return { success: false, isSaved: false };
    }

    const result = await response.json();
    console.log("‚úÖ Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉú Í≤∞Í≥º:", result);
    
    return result;
  } catch (error) {
    console.error("‚ùå Ï¶êÍ≤®Ï∞æÍ∏∞ ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®:", error);
    return { success: false, isSaved: false };
  }
};

// Ï¶êÍ≤®Ï∞æÍ∏∞ Î™©Î°ù Ï°∞Ìöå API
export const getSavedSongs = async () => {
  try {
    console.log("‚≠ê Fetching saved songs list");
    const response = await fetch(`${API_BASE_URL}/api/songs/saved`, {
      method: "GET",
      headers: getAuthHeadersForGet(),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log("‚úÖ Get saved songs response:", result);
    return result;
  } catch (error) {
    console.error("‚ùå Failed to get saved songs:", error);
    throw error;
  }
};
